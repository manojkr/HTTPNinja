{"name":"HTTPNinja","tagline":"Smalltalk Framework for writing Rest Api clients","body":"HTTPNinja\r\n=========\r\n\r\nHTTPNinja is a SmallTalk framework to write Rest Api clients with minimal effort. It is heavily inspired from [HTTParty] in Ruby. The goal is to write fully functional Rest Api clients without writing any redundant code. \r\n\r\n\r\n\r\nExamples\r\n---------------------\r\n\r\nLet's create a client to connect to GitHub. \r\n\r\n - Create a GitHub that extends RESTClient\r\n```smalltalk\r\nRESTClient subclass: #GitHub\r\n\tinstanceVariableNames: ''\r\n\tclassVariableNames: ''\r\n\tcategory: 'HTTPNinja'\r\n```\r\n\r\n - Define a method baseUri to provide Base Url for the api\r\n```ruby\r\nGitHub>>baseUri\r\n\t^'https://api.github.com/'.\r\n```\r\n - Define a method to provide Default Query parameters\r\n```ruby\r\nGitHub>>defaultParams\r\n\t^{ #region -> 'US' }.\r\n```\r\n\r\n - Specify the output format of the Api as XML or JSON. HTTPNinja will automatically convert XML or JSON output to Smalltalk data structures \r\n```ruby \r\nGitHub>>outputFormat\r\n\t^#json\r\n```\r\n\r\n - GitHub uses Basic Authentication. Provides methods for username and password to use Basic authentication.\r\n```ruby \r\nGitHub>>username\r\n\t^'manojkr'.\r\n```\r\n```ruby \r\nGitHub>>password\r\n\t^'secret'.\r\n```\r\n\r\n - That's it. Now you are all set to start invoking different api methods. \r\n - Let's write a method to get User Information on GitHub\r\n```ruby \r\nGitHub>>user:username\r\n\t^self get: 'users/',username.\r\n```\r\nAnother method to get repositories for a user.\r\n```ruby \r\nGitHub>>userRepos:username\r\n\t^self get: '/users/',username,'/repos'.\r\n```\r\n - Let's try using this GitHub client\r\n```sh\r\nclient := GitHub new.\r\nuserinfo := y user:'manojkr'.\r\nuserrepos := y userRepos:'manojkr'.\r\n```\r\n\r\nApi Reference\r\n--------\r\nHTTPNinja provides methods for commonly used HTTP verbs.\r\n\r\n```ruby\r\nget:path\r\nmake a GET request at location \"path\"\r\n\r\nget:path params:queryParams\r\nmake a GET request at location \"path\" with \"queryParams\" dictionary as Query Parameters\r\n\r\npostForm:dictionary to: path\r\nPOST dictionary as a form with encoding type \"application/x-www-form-urlencoded\" to location \"path\"\r\n\r\npostJson:json to: path\r\nPOST JSON string with headers 'Content-type:application/json' to location \"path\"\r\n\r\npostDictAsJson:dic to:path\r\nConvert dictionary \"dic\" to JSON and POST resulting JSON string with headers 'Content-type:application/json' to location \"path\"\r\n\r\npostXml:xml to:path\r\nPOST XML string with headers 'Content-type:application/xml' to location \"path\"\r\n```\r\n\r\nVersion\r\n----\r\n\r\n0.1\r\n\r\nTech\r\n-----------\r\n\r\nHTTPNinja uses a number of open source projects to work properly:\r\n\r\n* [Zinc HTTP Components] - an open-source Smalltalk framework to deal with the HTTP networking protocol\r\n* [Zinc SSO] - framework for implementations of client side OAuth & OpenID & SSL\r\n* [NeoJson] - an elegant and efficient standalone Smalltalk framework to read and write JSON converting to or from Smalltalk objects\r\n\r\nInstallation\r\n--------------\r\nComing soon\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n**Free Software, Hell Yeah!**\r\n\r\n[HTTParty]: https://github.com/jnunemaker/httparty\r\n[Zinc HTTP Components]: http://zn.stfx.eu/zn/index.html\r\n[Zinc SSO]: https://github.com/svenvc/docs/blob/master/zinc/zinc-sso-paper.md\r\n[NeoJson]: http://stfx.eu/neojson/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}